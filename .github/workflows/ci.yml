name: CI for Streamlit Chatbot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SSL_MODE: ${{ secrets.SSL_MODE || 'disable' }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Python 설정 (3.10)
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PINECONE_ENV=${{ secrets.PINECONE_ENV }}" >> .env
          echo "PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}" >> .env


      - name: Wait for PostgreSQL
        run: |
          export PGUSER=postgres
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "✅ PostgreSQL is ready!"
              exit 0
            fi
            echo "⏳ Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "❌ PostgreSQL did not start in time!"
          exit 1

      - name: Check PostgreSQL Connection
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "SELECT 1;"
          echo "✅ PostgreSQL connection successful!"

      - name: Pytest 실행
        run: |
          export PYTHONPATH=$(pwd)
          pytest --maxfail=5 --disable-warnings --tb=short
